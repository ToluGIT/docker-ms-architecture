from fastapi import APIRouter, Depends, HTTPException, status, Request
from sqlalchemy.orm import Session
from slowapi.util import get_remote_address
from typing import List
from .. import models, database
from pydantic import BaseModel
from app.config import limiter


router = APIRouter(
    prefix="/items",
    tags=["items"],
    responses={404: {"description": "Not found"}},
)

# Pydantic models for request/response
class ItemBase(BaseModel):
    name: str
    description: str = None
    price: float
    is_available: bool = True

class ItemCreate(ItemBase):
    owner_id: int

class ItemResponse(ItemBase):
    id: int
    owner_id: int

    class Config:
        from_attributes = True

# Helper functions
def get_items(db: Session, skip: int = 0, limit: int = 100):
    return db.query(models.Item).offset(skip).limit(limit).all()

def get_item_by_id(db: Session, item_id: int):
    return db.query(models.Item).filter(models.Item.id == item_id).first()

def create_user_item(db: Session, item: ItemCreate, user_id: int):
    # Extract item data and explicitly set owner_id to avoid duplication
    item_data = item.dict()
    if 'owner_id' in item_data:
        del item_data['owner_id']
    db_item = models.Item(**item_data, owner_id=user_id)
    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item

# Endpoints with rate limiting added
@router.post("/", response_model=ItemResponse, status_code=status.HTTP_201_CREATED)
@limiter.limit("10/minute")  # Add this decorator BEFORE the router decorator
def create_item(request: Request, item: ItemCreate, db: Session = Depends(database.get_db)):  # Add request parameter
    # Check if user exists
    user = db.query(models.User).filter(models.User.id == item.owner_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    return create_user_item(db=db, item=item, user_id=item.owner_id)

@router.get("/", response_model=List[ItemResponse])
@limiter.limit("30/minute")
def read_items(request: Request, skip: int = 0, limit: int = 100, db: Session = Depends(database.get_db)):
    items = get_items(db, skip=skip, limit=limit)
    return items

@router.get("/{item_id}", response_model=ItemResponse)
@limiter.limit("30/minute")
def read_item(request: Request, item_id: int, db: Session = Depends(database.get_db)):
    db_item = get_item_by_id(db, item_id=item_id)
    if db_item is None:
        raise HTTPException(status_code=404, detail="Item not found")
    return db_item

@router.put("/{item_id}", response_model=ItemResponse)
@limiter.limit("15/minute")
def update_item(request: Request, item_id: int, item: ItemCreate, db: Session = Depends(database.get_db)):
    db_item = get_item_by_id(db, item_id=item_id)
    if db_item is None:
        raise HTTPException(status_code=404, detail="Item not found")
    
    # Update item attributes
    for key, value in item.dict().items():
        setattr(db_item, key, value)
    
    db.commit()
    db.refresh(db_item)
    return db_item

@router.delete("/{item_id}", status_code=status.HTTP_204_NO_CONTENT)
@limiter.limit("10/minute")
def delete_item(request: Request, item_id: int, db: Session = Depends(database.get_db)):
    db_item = get_item_by_id(db, item_id=item_id)
    if db_item is None:
        raise HTTPException(status_code=404, detail="Item not found")
    
    db.delete(db_item)
    db.commit()
    return None