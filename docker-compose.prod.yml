services:
  api:
    build: 
      context: ./services/api
      dockerfile: Dockerfile  # Using production Dockerfile
    ports:
      - "8000:8000"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD}  # Explicitly pass password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@db:5432/${DB_NAME:-app}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:80,http://localhost,http://13.59.26.27}
      - ENABLE_TRACING=true
      - OTLP_ENDPOINT=jaeger:4317
      - OTEL_SERVICE_NAME=api-service
      - OTEL_TRACES_SAMPLER=parentbased_traceidratio
      - OTEL_TRACES_SAMPLER_ARG=0.1
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc
      - OTEL_PROPAGATORS=tracecontext,baggage,b3
      - OTEL_LOG_LEVEL=info
      - CORRELATION_ID_HEADER=X-Correlation-ID
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
      - monitoring-network  
      - tracing-network   
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s  # Give the API some time to start up
    restart: unless-stopped  # Add restart policy


  
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile  # Using production Dockerfile
    ports:
      - "80:80"  # Production frontend runs on port 80
    environment:
      # Add frontend tracing environment variables
      - REACT_APP_OTEL_ENABLED=true
      - REACT_APP_SERVICE_NAME=frontend-service  
      - REACT_APP_OTEL_ENDPOINT=/api/v1/traces
      - REACT_APP_OTEL_PROPAGATOR=tracecontext,b3
      - REACT_APP_CORRELATION_HEADER=X-Correlation-ID
      - REACT_APP_OTEL_SAMPLING_RATIO=0.1  # 10% sampling for production
    depends_on:
      api:
        condition: service_healthy  # Wait for API to be healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  db:
    build:
      context: ./services/db
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-app}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    build:
      context: ./services/redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - app-network
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes  
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    user: "999"  # Use redis user ID to fix permission issues


networks:
  app-network:
    name: microservices_app_network
    driver: bridge
  monitoring-network:
    name: microservices_monitoring_network
    driver: bridge
  tracing-network:
    name: microservices_tracing_network
    driver: bridge

volumes:
  pgdata:
  redisdata:
